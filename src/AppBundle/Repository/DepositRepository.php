<?php

namespace AppBundle\Repository;

use AppBundle\DTO\InventoryItem;
use AppBundle\Entity\Deposit;
use AppBundle\Entity\Integration;
use AppBundle\Service\IntegrationService;
use AppBundle\Service\ItemsPriceService;
use AppBundle\Utils\DepositFilterParams;
use AppBundle\Utils\StatisticFilterParams;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * DepositRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DepositRepository extends EntityRepository
{

    public function save(Deposit $deposit)
    {
        $em = $this->getEntityManager();
        if ($deposit->getId()) {
            $em->merge($deposit);
        } else {
            $em->persist($deposit);
        }
        $em->flush();
        return $deposit;
    }
    /**
     * @return array
     */
    public function getByLostPushBacks()
    {
        $qb = $this->createQueryBuilder('d');
        $qb
            ->select('d.id')
            ->leftJoin('d.integration', 'i', 'with')
            ->andWhere('d.status = :status')
            ->andWhere('d.pushStatus IS NULL OR d.pushStatus IN (:resend_statuses)')
            ->andWhere('i.isDemo IS NULL')
            ->setParameter(':resend_statuses', [IntegrationService::PUSH_STATUS_LOCK, IntegrationService::PUSH_STATUS_UNKNOWN_ERROR])
            ->setParameter('status', Deposit::STATUS_COMPLETED)
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $dateFrom
     * @param $dateTo
     * @param $dateFormat
     *
     * @return \Doctrine\ORM\Query
     */
    public function getStatsQuery($dateFrom, $dateTo, $dateFormat, Integration $integration = null, $currency = null)
    {
        $qb = $this->createQueryBuilder('d');
        $qb
            ->select("DATE_FORMAT(d.created, $dateFormat) as date")
            ->addSelect('d.currency as currency')
            ->addSelect('COUNT(DISTINCT d.steamId) as unique_users')
            ->addSelect('SUM(d.value) as sum_value')
            ->addSelect('SUM(d.noTaxValue) as sum_no_tax_value')
            ->addSelect('SUM(d.noTaxValue) - SUM(d.value) as profit')
            ->where('d.created BETWEEN :dateFrom AND :dateTo')
            ->andWhere('d.status = :status')
            ->groupBy('date')
            ->addGroupBy('d.currency')
            ->orderBy('d.created', 'DESC')
            ->setParameters([
                ':dateFrom' => $dateFrom,
                ':dateTo' => $dateTo,
                ':status' => Deposit::STATUS_COMPLETED,
            ])
        ;

        if ($integration instanceof Integration) {
            $qb->andWhere('d.integration = :integration')
                ->setParameter('integration', $integration);
        }

        if (!empty($currency)){
            $qb->andWhere('d.currency = :currency')->setParameter('currency', (string) $currency);
        }

        return $qb->getQuery();
    }

    /**
     * @param $integration
     * @param $dateFrom
     * @param $dateTo
     *
     * @return array
     */
    public function getStatisticsAggregatedByCurrency(DepositFilterParams $params)
    {
        $qb = $this->createQueryBuilder('d');
        $qb
            ->select('d.currency as currency')
            ->addSelect('COUNT(DISTINCT d.steamId) as unique_users')
            ->addSelect('ROUND(SUM(d.value),2) as sum_value')
            ->addSelect('ROUND((SUM(d.value) / COUNT(DISTINCT d.steamId)), 2) as average_check')
            ->indexBy('d', 'd.currency')
            ->where('d.created BETWEEN :dateFrom AND :dateTo')
            ->andWhere('d.integration = :integration')
            ->groupBy('d.currency')
            ->orderBy('d.created', 'DESC')
            ->setParameters([
                ':integration' => $params->getIntegration(),
                ':dateFrom' => $params->getDateFrom(),
                ':dateTo' => $params->getDateTo(),
            ])
        ;

        if ($params->getStatuses()) {
            $qb->andWhere('d.status IN (:status)')->setParameter('status', $params->getStatuses(), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
        }

        return $qb->getQuery()->getResult();
    }

    public function getStatisticsBySkinTypeAggregatedByCurrency(DepositFilterParams $params)
    {
        $query = $this->createQueryBuilder('d');
        $skinType = $params->getSkinType();
        if (in_array($skinType,[Deposit::ITEMS_PRICE_DOTA_KEY, Deposit::ITEMS_PRICE_CSGO_KEY]))
        {
            $skinType = ucfirst($skinType);
            $query
                ->select('d.currency as currency')
                ->addSelect('COUNT(DISTINCT d.steamId) as unique_users')
                ->addSelect("ROUND(SUM(d.value{$skinType}),2) as sum_value")
                ->addSelect("ROUND((SUM(d.value{$skinType}) / COUNT(DISTINCT d.steamId)), 2) as average_check")
                ->indexBy('d','d.currency')
                ->where('d.created BETWEEN :dateFrom AND :dateTo')
                ->andWhere('d.integration = :integration')
                ->andWhere("d.value{$skinType} IS NOT NULL")
                ->groupBy('d.currency')
                ->orderBy('d.created', 'DESC')
                ->setParameters([
                    ':integration' => $params->getIntegration(),
                    ':dateFrom' => $params->getDateFrom(),
                    ':dateTo' => $params->getDateTo(),
                ]);

            if ($params->getStatuses()) {
                $query->andWhere('d.status IN (:status)')->setParameter('status', $params->getStatuses(), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
            }

            return $query->getQuery()->getResult();
        }

        return null;

    }

    /**
     * @param $integration
     * @param $currency
     * @param $dateFrom
     * @param $dateTo
     * @param $groupBy
     * @param $limit
     * @param $offset
     *
     * @return array
     */
    public function getStatisticsAggregatedByCurrencyAndDate($integration, $currency, $dateFrom, $dateTo, $groupBy, $limit, $offset)
    {
        $qb = $this->createQueryBuilder('d');
        $qb
            ->select("DATE_FORMAT(d.created, $groupBy) as date")
            ->addSelect('d.currency as currency')
            ->addSelect('COUNT(DISTINCT d.steamId) as unique_users')
            ->addSelect('ROUND((SUM(d.value) / COUNT(d.id)), 2) as average_check')
            ->addSelect('SUM(d.value) as sum_value')
//            ->indexBy("d", "date")
            ->where('d.created BETWEEN :dateFrom AND :dateTo')
            ->andWhere('d.integration = :integration')
            ->andWhere('d.status = :status_completed')
            ->andWhere('d.currency = :currency')
            ->groupBy('date')
            ->orderBy('d.created', 'ASC')
            ->setFirstResult($offset)
            ->setParameters([
                ':integration' => $integration,
                ':currency' => $currency,
                ':dateFrom' => $dateFrom,
                ':dateTo' => $dateTo,
                ':status_completed' => Deposit::STATUS_COMPLETED,
            ]);

        if (!empty($limit)) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $integration
     * @param $dateFrom
     * @param $dateTo
     * @param $limit
     * @param $offset
     *
     * @return array
     */
    public function getDepositsByIntegration(DepositFilterParams $params)
    {
        $qb = $this->createQueryBuilder('d');
        $qb
            ->select('d.id')
            ->addSelect('d.tradeHash as trade_hash')
            ->addSelect('d.orderId as order_id')
            ->addSelect('d.created')
            ->addSelect('d.value')
            ->addSelect('d.currency')
            ->addSelect('d.status')
            ->addSelect('d.steamId as steam_id')
            ->addSelect('d.pushStatus as push_status')
            //expanded
            ->addSelect('d.note')
            ->addSelect('d.tradeOfferId as trade_offer_id')
            ->addSelect('d.tradeUrl as trade_url')
            ->addSelect('d.pushbackCreated as pushback_created')
            ->addSelect('d.items')
            ->where('d.integration = :integration')
            ->andWhere('d.created BETWEEN :dateFrom AND :dateTo')
            ->orderBy('d.created', 'DESC')
            ->setFirstResult($params->getOffset())
            ->setParameters([
                ':integration' => $params->getIntegration(),
                ':dateFrom' => $params->getDateFrom(),
                ':dateTo' => $params->getDateTo(),
            ])
        ;

        if ($params->getLimit()) {
            $qb->setMaxResults($params->getLimit());
        }

        if ($params->getStatuses()) {
            $qb->andWhere('d.status IN (:status)')->setParameter('status', $params->getStatuses(), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
        }

        if ($params->getPrice() !== null) {
            if ($params->getPriceCriteria()) {
                $criteria = $params->getPriceCriteria();
                $qb->andWhere($qb->expr()->$criteria('d.value', $params->getPrice()));
            } else {
                $qb->andWhere('d.value = :price')->setParameter('price', $params->getPrice());
            }
        }

        if ($params->getCountItems() !== null)
        {
            if ($params->getCountItemsCriteria())
            {
                $criteria = $params->getCountItemsCriteria();
                $qb->andWhere($qb->expr()->$criteria('JSON_LENGTH(JSON_KEYS(d.items))', $params->getCountItems()));
            }
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * find transactions by parameters.
     *
     * @param DepositFilterParams $params
     */
    public function getDepositsByParameters(DepositFilterParams $params)
    {
        $query = $this->createQueryBuilder('d');
        $query
            ->select('d.id')
            ->addSelect('d.tradeHash as trade_hash')
            ->addSelect('d.orderId as order_id')
            ->addSelect("DATE_FORMAT(d.created, '%Y-%m-%d') as created")
            ->addSelect('d.value')
            ->addSelect('d.currency')
            ->addSelect('d.status')
            ->addSelect('d.steamId as steam_id')
            ->addSelect('d.pushStatus as push_status')
            //expanded
            ->addSelect('d.note')
            ->addSelect('d.tradeOfferId as trade_offer_id')
            ->addSelect('d.tradeUrl as trade_url')
            ->addSelect('d.pushbackCreated as pushback_created');

        if ($params->getIntegrationId()) {
            $query->andWhere('d.integration = :intergation')->setParameter('intergation', $params->getIntegrationId());
        }

        if ($params->getDateFrom()) {
            $query->andWhere('d.created >= :dateFrom')->setParameter('dateFrom', $params->getDateFrom());
        }

        if ($params->getDateTo()) {
            $query->andWhere('d.created <= :dateTo')->setParameter('dateTo', $params->getDateTo());
        }

        if ($params->getStatus()) {
            $query->andWhere('d.status = :status')->setParameter('status', $params->getStatus());
        }

        if ($params->getPushStatus()) {
            $query->andWhere('d.pushStatus = :pushStatus')->setParameter('pushStatus', $params->getPushStatus());
        }

        if ($params->getCurrency()) {
            $query->andWhere('d.currency = :currency')->setParameter('currency', $params->getCurrency());
        }

        if ($params->getOffset()) {
            $query->setFirstResult($params->getOffset());
        }

        if ($params->getLimit()) {
            $query->setMaxResults($params->getLimit());
        }

        if (!empty($limit)) {
            $query->setMaxResults($limit);
        }

        $query->orderBy('d.created', 'DESC');
        return $query->getQuery()->getResult();
    }

    /**
     * @param Integration $integration
     *
     * @return array
     */
    public function getDepositValueSumByIntegration(Integration $integration)
    {
        $qb = $this->createQueryBuilder('d');
        $qb->select('SUM(d.value) as profit')
            ->addSelect('d.currency')
            ->groupBy('d.currency')
            ->where('d.integration = :integration')
            ->andWhere('d.status = :status')
            ->indexBy('d', 'd.currency')
            ->setParameter('integration', $integration)
            ->setParameter('status', Deposit::STATUS_COMPLETED);

        return $qb->getQuery()->getResult();
    }

    public function getCount(DepositFilterParams $params)
    {
        $query = $this->createQueryBuilder('d');
        $query
            ->select('COUNT(1)');

        if ($params->getIntegration()) {
            $query->andWhere('d.integration =:integration')->setParameter('integration', $params->getIntegration());
        }

        if ($params->getDateFrom()) {
            $query->andWhere('d.created >= :dateFrom')->setParameter('dateFrom', $params->getDateFrom());
        }

        if ($params->getDateTo()) {
            $query->andWhere('d.created <= :dateTo')->setParameter('dateTo', $params->getDateTo());
        }

        if ($params->getCurrency()){
            $query->andWhere('d.currency = :currency')->setParameter('currency', $params->getCurrency());
        }

        if ($params->getStatuses()){
            $query->andWhere('d.status IN (:status)')->setParameter('status', $params->getStatuses(), \Doctrine\DBAL\Connection::PARAM_STR_ARRAY);
        }

        if ($params->getStatus()){
            $query->andWhere('d.status =:singleStatus')->setParameter('singleStatus', $params->getStatus());
        }

        if ($params->getPrice() !== null) {
            if ($params->getPriceCriteria()) {
                $criteria = $params->getPriceCriteria();
                $query->andWhere($query->expr()->$criteria('d.value', $params->getPrice()));
            } else {
                $query->andWhere('d.value = :price')->setParameter('price', $params->getPrice());
            }
        }

        if ($params->getCountItems() !== null)
        {
            if ($params->getCountItemsCriteria())
            {
                $criteria = $params->getCountItemsCriteria();
                $query->andWhere($query->expr()->$criteria('JSON_LENGTH(JSON_KEYS(d.items))', $params->getCountItems()));
            }
        }

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * Returns sum of differences between value and noTaxValue per deposit.
     *
     * @return mixed
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @throws \Doctrine\ORM\NoResultException
     */
    public function getProfitTotal()
    {
        return $this->createQueryBuilder('d')
            ->select('SUM(d.noTaxValue - d.value)')
            ->andWhere('d.status = :status_completed')
            ->setParameter(':status_completed', Deposit::STATUS_COMPLETED)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function deleteByIntegration(Integration $integration)
    {
        $query = $this->createQueryBuilder('d');
        $query
            ->delete('AppBundle:Deposit', 'd')
            ->where('d.integration = :integration')
            ->setParameter('integration', $integration->getId());

        return $query->getQuery()->execute();
    }

    public function updateStatusByIds(array $ids, string $status)
    {
        $query = $this->createQueryBuilder('d');
        $query->update()
            ->set('d.status', ':status')
            ->setParameter('status', $status)
            ->where('d.id in ('. implode(",", $ids) .')');
        $query->getQuery()->execute();
    }
}
